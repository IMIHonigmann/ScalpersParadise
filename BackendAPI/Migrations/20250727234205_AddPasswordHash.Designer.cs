// <auto-generated />
using System;
using BackendAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(ScalpersParadiseContext))]
    [Migration("20250727234205_AddPasswordHash")]
    partial class AddPasswordHash
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("userreservations_reservation_id_seq");

            modelBuilder.Entity("BackendAPI.Models.Auditorium", b =>
                {
                    b.Property<int>("AuditoriumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("auditorium_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditoriumId"));

                    b.Property<string>("AuditoriumType")
                        .HasColumnType("character varying")
                        .HasColumnName("auditorium_type");

                    b.HasKey("AuditoriumId")
                        .HasName("auditoriums_pkey");

                    b.HasIndex("AuditoriumType");

                    b.ToTable("auditoriums", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Auditoriumprice", b =>
                {
                    b.Property<string>("AuditoriumType")
                        .HasColumnType("character varying")
                        .HasColumnName("auditorium_type");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("AuditoriumType")
                        .HasName("auditoriumprices_pkey");

                    b.ToTable("auditoriumprices", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.DistinctMovieid", b =>
                {
                    b.Property<int?>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.ToTable((string)null);

                    b.ToView("distinct_movieids", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Screening", b =>
                {
                    b.Property<long>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("screening_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ScreeningId"));

                    b.Property<int?>("AuditoriumId")
                        .HasColumnType("integer")
                        .HasColumnName("auditorium_id");

                    b.Property<double?>("DynamicPricingModifier")
                        .HasColumnType("double precision")
                        .HasColumnName("dynamic_pricing_modifier");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<DateTime?>("ScreeningTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("screening_time");

                    b.HasKey("ScreeningId")
                        .HasName("screenings_pkey");

                    b.HasIndex("AuditoriumId");

                    b.ToTable("screenings", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("AuditoriumId")
                        .HasColumnType("integer")
                        .HasColumnName("auditorium_id");

                    b.Property<int?>("RowNumber")
                        .HasColumnType("integer")
                        .HasColumnName("row_number");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("integer")
                        .HasColumnName("seat_number");

                    b.Property<string>("SeatType")
                        .HasColumnType("text")
                        .HasColumnName("seat_type");

                    b.HasKey("SeatId")
                        .HasName("seats_pkey");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("SeatType");

                    b.ToTable("seats", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Seatprice", b =>
                {
                    b.Property<string>("SeatType")
                        .HasColumnType("text")
                        .HasColumnName("seat_type");

                    b.Property<double?>("PriceModifier")
                        .HasColumnType("double precision")
                        .HasColumnName("price_modifier");

                    b.HasKey("SeatType")
                        .HasName("seatprices_pkey");

                    b.ToTable("seatprices", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Userbalance", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<double?>("Balance")
                        .HasColumnType("double precision")
                        .HasColumnName("balance");

                    b.HasKey("UserId")
                        .HasName("userbalances_pkey");

                    b.ToTable("userbalances", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Userreservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reservation_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime?>("BoughtAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("bought_at");

                    b.Property<double?>("PricePaid")
                        .HasColumnType("double precision")
                        .HasColumnName("price_paid");

                    b.Property<long?>("ScreeningId")
                        .HasColumnType("bigint")
                        .HasColumnName("screening_id");

                    b.Property<int?>("SeatId")
                        .HasColumnType("integer")
                        .HasColumnName("seat_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ReservationId")
                        .HasName("userreservations_pkey");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UserId");

                    b.ToTable("userreservations", (string)null);
                });

            modelBuilder.Entity("BackendAPI.Models.Auditorium", b =>
                {
                    b.HasOne("BackendAPI.Models.Auditoriumprice", "AuditoriumTypeNavigation")
                        .WithMany("Auditoria")
                        .HasForeignKey("AuditoriumType")
                        .HasConstraintName("fk_auditoriums_auditoriumprices");

                    b.Navigation("AuditoriumTypeNavigation");
                });

            modelBuilder.Entity("BackendAPI.Models.Screening", b =>
                {
                    b.HasOne("BackendAPI.Models.Auditorium", "Auditorium")
                        .WithMany("Screenings")
                        .HasForeignKey("AuditoriumId")
                        .HasConstraintName("screenings_auditorium_id_fkey");

                    b.Navigation("Auditorium");
                });

            modelBuilder.Entity("BackendAPI.Models.Seat", b =>
                {
                    b.HasOne("BackendAPI.Models.Auditorium", "Auditorium")
                        .WithMany("Seats")
                        .HasForeignKey("AuditoriumId")
                        .HasConstraintName("seats_auditorium_id_fkey");

                    b.HasOne("BackendAPI.Models.Seatprice", "SeatTypeNavigation")
                        .WithMany("Seats")
                        .HasForeignKey("SeatType")
                        .HasConstraintName("fk_seats_seatprices");

                    b.Navigation("Auditorium");

                    b.Navigation("SeatTypeNavigation");
                });

            modelBuilder.Entity("BackendAPI.Models.Userbalance", b =>
                {
                    b.HasOne("BackendAPI.Models.User", "User")
                        .WithOne("Userbalance")
                        .HasForeignKey("BackendAPI.Models.Userbalance", "UserId")
                        .IsRequired()
                        .HasConstraintName("userbalances_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAPI.Models.Userreservation", b =>
                {
                    b.HasOne("BackendAPI.Models.Screening", "Screening")
                        .WithMany("Userreservations")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("userreservations_screening_id_fkey");

                    b.HasOne("BackendAPI.Models.Seat", "Seat")
                        .WithMany("Userreservations")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("userreservations_seat_id_fkey");

                    b.HasOne("BackendAPI.Models.User", "User")
                        .WithMany("Userreservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("userreservations_user_id_fkey");

                    b.Navigation("Screening");

                    b.Navigation("Seat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendAPI.Models.Auditorium", b =>
                {
                    b.Navigation("Screenings");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BackendAPI.Models.Auditoriumprice", b =>
                {
                    b.Navigation("Auditoria");
                });

            modelBuilder.Entity("BackendAPI.Models.Screening", b =>
                {
                    b.Navigation("Userreservations");
                });

            modelBuilder.Entity("BackendAPI.Models.Seat", b =>
                {
                    b.Navigation("Userreservations");
                });

            modelBuilder.Entity("BackendAPI.Models.Seatprice", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("BackendAPI.Models.User", b =>
                {
                    b.Navigation("Userbalance");

                    b.Navigation("Userreservations");
                });
#pragma warning restore 612, 618
        }
    }
}
